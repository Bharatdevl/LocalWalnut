"""
Django settings for walnuteq project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from pathlib import Path

import redis
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# loading environment variables
load_dotenv(Path(BASE_DIR).joinpath(".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRETKEY")

#
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
# SECURITY WARNING: don't run with debug turned on in production!
if os.environ.get("DEPLOY_PRODUCTION") != "false":
    DEBUG = False
    ALLOWED_HOSTS = os.environ.get("ALLOWED_HOST", "").split(
        ","
    )  # allow only registered domain
else:
    DEBUG = True
    ALLOWED_HOSTS = ["*"]

CSRF_TRUSTED_ORIGINS = os.environ.get("CSRF_TRUSTED_ORIGINS").split(",")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # apps
    "company.apps.CompanyConfig",
    "employee.apps.EmployeeConfig",
    "scheduler.apps.SchedulerConfig",
    "survey.apps.SurveyConfig",
    "services.apps.ServicesConfig",  # service app
    "curriculum.apps.CurriculumConfig",
    "dashboard.apps.DashboardConfig",  # dashboard app
    "django_celery_beat",
    # 'entity_users.apps.EntityUsersConfig',
    # 'surveyqa.apps.SurveyqaConfig',
    # 'twilio_app.apps.TwilioAppConfig',
    # 'schedulesms.apps.SchedulesmsConfig',
    # 'django_redis',
    # 'django_celery_results',
    # 'django_celery_beat',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "walnuteq.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "walnuteq.wsgi.application"


# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
"""
============================== DATABASE setting =============================
"""

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("DBNAME"),
        "USER": os.environ.get("DBUSER"),
        "PASSWORD": os.environ.get("DBPASSWORD"),
        "HOST": os.environ.get("DBHOST"),
        "PORT": os.environ.get("DBPORT"),
    }
}


"""
============================== Authentication Password Validation =====================
"""
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
]

LOGIN_URL = os.environ.get("LOGIN_URL")

# LOGOUT_REDIRECT_URL = os.environ.get("LOGOUT_REDIRECT_URL")

"""
================================   Internationalization  =========================
"""
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = os.environ.get("TIME_ZONE")

USE_I18N = True

USE_L10N = True

USE_TZ = True

"""
========================Static and Media file Setting ============================
"""
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/
# import os
STATIC_URL = "/static/"
# STATICFILES_DIRS = [os.path.join(BASE_DIR,'templates/static')]
# Static Folder in Root/Parent Directory
STATICFILES_DIRS = [
    Path(BASE_DIR).joinpath("static"),
]
# STATIC_ROOT = os.path.join(BASE_DIR,"static-prod")
# In Devlopment run python manage.py collectstatic
STATIC_ROOT = Path(BASE_DIR).joinpath("static-prod")
MEDIA_URL = "/media/"
MEDIA_ROOT = Path(BASE_DIR).joinpath("media")

"""
========================Email Settings ============================
"""
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
EMAIL_BACKEND = os.environ.get("EMAIL_BACKEND")
EMAIL_HOST = os.environ.get("EAMIL_HOST")
EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS")
EMAIL_PORT = os.environ.get("EMAIL_PORT")
# use your own mail_id
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
# use your own mail app_password
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")

"""
===================================== TWILIO SET UP =======================
"""
ACCOUNT_SID = os.environ.get("ACCOUNT_SID")
AUTH_TOKEN = os.environ.get("AUTH_TOKEN")
TWILIO_NUMBER = os.environ.get("TWILIO_NUMBER")
TWILIO_STATUS_CALLBACK_LINK = os.environ.get("TWILIO_STATUS_CALLBACK_LINK")

from django.contrib.messages import constants as messages

MESSAGE_TAGS = {
    messages.DEBUG: "alert-info",
    messages.INFO: "alert-info",
    messages.SUCCESS: "alert-success",
    messages.WARNING: "alert-warning",
    messages.ERROR: "alert-danger",
}

# TWILIO_EMAIL = config_parser.get("APP", "TWILIO_EMAIL")
# TWILIO_STATUS_CALLBACK_LINK = config_parser.get(
#     "APP", "TWILIO_STATUS_CALLBACK_LINK"
# )

"""
================================== Celery Configuration to connect with redis ===============
"""
"""
'redis://localhost:6379' specifies the Redis URL to use for the backend. In this case,
 Redis is running on the same machine as the Django project, on the default Redis port 6379.
"""
# CELERY_RESULT_BACKEND = "redis://localhost:6379"

"""
sets the serializer used by Celery for task messages. In this case, it is set to JSON.
"""
CELERY_ACCEPT_CONTENT = ["application/json"]

# sets the list of content types that Celery workers will accept from clients. In this case, it is set to accept only JSON content.
CELERY_TASK_SERIALIZER = "json"

# sets the serializer used by Celery for task results. In this case, it is also set to JSON.
CELERY_RESULT_SERIALIZER = "json"

# sets the time zone used by Celery. In this case, it is set to Coordinated Universal Time (UTC).
CELERY_TIMEZONE = TIME_ZONE
"""
 is used in a Django project to configure Celery to store task errors even if they are marked as ignored.
"""
CELERY_STORE_ERRORS_EVEN_IF_IGNORED = True

"""
 By using an environment variable, the Celery broker URL can be easily changed without modifying the Django code itself.
"""
CELERY_BROKER_URL = os.environ.get("CELERY_BROKER")
# CELERY_BROKER_URL = os.environ.get("CELERY_BROKER", "redis://127.0.0.1:6379/0")

"""
Use caching for expensive operations that are performed frequently,
such as database queries or API calls.
"""
# CACHES = {
#     'default': {
#         'BACKEND': 'django_redis.cache.RedisCache',
#         'LOCATION': 'redis://127.0.0.1:6379/1',
#         'OPTIONS': {
#             'CLIENT_CLASS': 'django_redis.client.DefaultClient',
#         }
#     }
# }


"""The CELERY_BEAT_SCHEDULER setting is used to specify the scheduler that Celery Beat,
 a task scheduler built into Celery,
should use to store and manage scheduled tasks.
"""
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"


# run celery beat
# celery -A walnuteq beat -l info

# run celery worker
# celery -A walnuteq worker -l info

# ngrok

##################### REDIS CONF #################
REDIS_CURRICULUM_HOST = os.environ.get("REDIS_CURRICULUM_HOST")
REDIS_CURRICULUM_PORT = os.environ.get("REDIS_CURRICULUM_PORT")
REDIS_CURRICULUM_DB = os.environ.get("REDIS_CURRICULUM_DB")
REDIS_CURRICULUM_MAX_CONNECTION = os.environ.get(
    "REDIS_CURRICULUM_MAX_CONNECTION"
)

if REDIS_CURRICULUM_MAX_CONNECTION is not None:
    try:
        REDIS_CURRICULUM_MAX_CONNECTION = int(REDIS_CURRICULUM_MAX_CONNECTION)
    except (TypeError, ValueError):
        REDIS_CURRICULUM_MAX_CONNECTION = 10


REDIS_CURRICULUM_CONN = (
    lambda host=REDIS_CURRICULUM_HOST, port=REDIS_CURRICULUM_PORT, db=REDIS_CURRICULUM_DB, max_connections=REDIS_CURRICULUM_MAX_CONNECTION: (
        redis.Redis(
            connection_pool=redis.ConnectionPool(
                host=host, port=port, db=db, max_connections=max_connections
            )
        )
        if all((host, port, db))
        else None
    )
)()
