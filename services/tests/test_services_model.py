import pytest
from django.core.exceptions import ValidationError
from django.db import connection

from services.models import TwilioStatus


@pytest.fixture
def twiliostatus_data():
    TwilioStatus(
        sms_id="1",
        status="Success",
        employee_phone_number="0000000000",
        from_number="1234567890",
        error_code=None,
    ).save()


def get_number_of_fields(model_name):
    with connection.cursor() as cursor:
        cursor.execute(
            "SELECT COUNT(column_name) FROM information_schema.columns WHERE table_name = %s",
            (model_name,),
        )
        num_fields = cursor.fetchone()[0]
    return num_fields


def test_no_of_fields_twiliostatus():
    # keep in mind id field is autogenerated so it also counts
    assert len(TwilioStatus._meta.fields) == 7
    assert get_number_of_fields("services_twiliostatus") == 7


def test_twiliostatus_list_empty():
    assert TwilioStatus.objects.count() == 0


def test_create_a_twiliostatus(twiliostatus_data):
    assert TwilioStatus.objects.count() == 1
    assert (
        TwilioStatus.objects.latest("id").employee_phone_number == "0000000000"
    )


def test_create_twilio_status_obj(twiliostatus_data):
    assert TwilioStatus.objects.count() == 1
    assert TwilioStatus.objects.get(employee_phone_number="0000000000")


def test_check_no_alphabet_employee_phone_number(twiliostatus_data):
    twilio_status_obj = TwilioStatus.objects.latest("id")
    with pytest.raises(ValidationError):
        twilio_status_obj.employee_phone_number = "abc1234s"
        twilio_status_obj.full_clean()
        twilio_status_obj.save()


def test_check_no_alphabet_twilio_phone_number(twiliostatus_data):
    twilio_status_obj = TwilioStatus.objects.latest("id")
    with pytest.raises(ValidationError):
        twilio_status_obj.from_number = "abc1234s"
        twilio_status_obj.full_clean()
        twilio_status_obj.save()
